# Optional: load ffmpegServer plugin
#ffmpegServerConfigure(8081)
#ffmpegStreamConfigure("FfmStream1", 2, 0, "$(PORT)", 0, -1, 0)
#dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegStream.template", "P=$(PREFIX),R=ffmstream1:,PORT=FfmStream1,NDARRAY_PORT=$(PORT)")
#ffmpegFileConfigure("FfmFile1", 16, 0, "$(PORT)", 0, -1, 0)
#dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegFile.template", "P=$(PREFIX),R=ffmfile1:,PORT=FfmFile1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(FFMPEGSERVER)/db")
# Optional: load NDPluginEdge plugin
#NDEdgeConfigure("EDGE1", $(QSIZE), 0, "$(PORT)", 0, 0, 0, 0)
#dbLoadRecords("$(ADPLUGINEDGE)/db/NDEdge.template",  "P=$(PREFIX),R=Edge1:, PORT=EDGE1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(ADPLUGINEDGE)/db")
# Optional: load NDPluginCV plugin
#NDCVConfigure("CV1", $(QSIZE), 0, "$(PORT)", 0, 0, 0, 0, 0, $(MAX_THREADS=5))
#dbLoadRecords("$(ADCOMPVISION)/db/NDCV.template",  "P=$(PREFIX),R=CV1:, PORT=CV1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(ADCOMPVISION)/db")
# Optional: load NDPluginBar plugin
#NDBarConfigure("BAR1", $(QSIZE), 0, "$(PORT)", 0, 0, 0, 0, 0, $(MAX_THREADS=5))
#dbLoadRecords("$(ADPLUGINBAR)/db/NDBar.template",  "P=$(PREFIX),R=Bar1:, PORT=BAR1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(ADPLUGINBAR)/db")
# Optional: load scan records
#dbLoadRecords("$(SSCAN)/db/scan.db", "P=$(PREFIX),MAXPTS1=2000,MAXPTS2=200,MAXPTS3=20,MAXPTS4=10,MAXPTSH=10")
#set_requestfile_path("$(SSCAN)/db")
# Optional: load sseq record for acquisition sequence
#dbLoadRecords("$(CALC)/db/sseqRecord.db", "P=$(PREFIX), S=AcquireSequence")
#set_requestfile_path("$(CALC)/db")
# Optional: load devIocStats records (requires DEVIOCSTATS module)
#dbLoadRecords("$(DEVIOCSTATS)/db/iocAdminSoft.db", "IOC=$(PREFIX)")
# Optional: load alive record (requires ALIVE module)
#dbLoadRecords("$(ALIVE)/db/alive.db", "P=$(PREFIX),RHOST=192.168.1.254")
# Set the callback queue size to 5000, up from default of 2000 in base.
# This can be needed to avoid errors "callbackRequest: cbLow ring buffer full".
callbackSetQueueSize(5000)
set_requestfile_path("$(ADGENICAM)/GenICamApp/Db")
set_requestfile_path("$(ADSPINNAKER)/spinnakerApp/Db")
set_requestfile_path("$(ADCORE)/iocBoot")
set_requestfile_path("$(ADCORE)/ADApp/Db")
# Optional: load ffmpegServer plugin
ffmpegServerConfigure(8083)
ffmpegStreamConfigure("FfmStream1", 2, 0, "$(PORT)", 0, -1, 0)
dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegStream.template", "P=$(PREFIX),R=ffmstream1:,PORT=FfmStream1,NDARRAY_PORT=$(PORT)")
#ffmpegFileConfigure("FfmFile1", 16, 0, "$(PORT)", 0, -1, 0)
#dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegFile.template", "P=$(PREFIX),R=ffmfile1:,PORT=FfmFile1,NDARRAY_PORT=$(PORT)")
set_requestfile_path("$(FFMPEGSERVER)/db")
iocInit()
# save things every thirty seconds
create_monitor_set("auto_settings.req", 30,"P=$(PREFIX)")
# Wait for enum callbacks to complete
epicsThreadSleep(1.0)
# Wait for callbacks on the property limits (DRVL, DRVH) to complete
epicsThreadSleep(1.0)
#!../../bin/linux-x86_64/flir_cameras
< envPaths
# Optional: load ffmpegServer plugin
#ffmpegServerConfigure(8081)
#ffmpegStreamConfigure("FfmStream1", 2, 0, "$(PORT)", 0, -1, 0)
#dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegStream.template", "P=$(PREFIX),R=ffmstream1:,PORT=FfmStream1,NDARRAY_PORT=$(PORT)")
#ffmpegFileConfigure("FfmFile1", 16, 0, "$(PORT)", 0, -1, 0)
#dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegFile.template", "P=$(PREFIX),R=ffmfile1:,PORT=FfmFile1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(FFMPEGSERVER)/db")
# Optional: load NDPluginEdge plugin
#NDEdgeConfigure("EDGE1", $(QSIZE), 0, "$(PORT)", 0, 0, 0, 0)
#dbLoadRecords("$(ADPLUGINEDGE)/db/NDEdge.template",  "P=$(PREFIX),R=Edge1:, PORT=EDGE1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(ADPLUGINEDGE)/db")
# Optional: load NDPluginCV plugin
#NDCVConfigure("CV1", $(QSIZE), 0, "$(PORT)", 0, 0, 0, 0, 0, $(MAX_THREADS=5))
#dbLoadRecords("$(ADCOMPVISION)/db/NDCV.template",  "P=$(PREFIX),R=CV1:, PORT=CV1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(ADCOMPVISION)/db")
# Optional: load NDPluginBar plugin
#NDBarConfigure("BAR1", $(QSIZE), 0, "$(PORT)", 0, 0, 0, 0, 0, $(MAX_THREADS=5))
#dbLoadRecords("$(ADPLUGINBAR)/db/NDBar.template",  "P=$(PREFIX),R=Bar1:, PORT=BAR1,ADDR=0,TIMEOUT=1,NDARRAY_PORT=$(PORT)")
#set_requestfile_path("$(ADPLUGINBAR)/db")
# Optional: load scan records
#dbLoadRecords("$(SSCAN)/db/scan.db", "P=$(PREFIX),MAXPTS1=2000,MAXPTS2=200,MAXPTS3=20,MAXPTS4=10,MAXPTSH=10")
#set_requestfile_path("$(SSCAN)/db")
# Optional: load sseq record for acquisition sequence
#dbLoadRecords("$(CALC)/db/sseqRecord.db", "P=$(PREFIX), S=AcquireSequence")
#set_requestfile_path("$(CALC)/db")
# Optional: load devIocStats records (requires DEVIOCSTATS module)
#dbLoadRecords("$(DEVIOCSTATS)/db/iocAdminSoft.db", "IOC=$(PREFIX)")
# Optional: load alive record (requires ALIVE module)
#dbLoadRecords("$(ALIVE)/db/alive.db", "P=$(PREFIX),RHOST=192.168.1.254")
# Set the callback queue size to 5000, up from default of 2000 in base.
# This can be needed to avoid errors "callbackRequest: cbLow ring buffer full".
callbackSetQueueSize(5000)
set_requestfile_path("$(ADGENICAM)/GenICamApp/Db")
set_requestfile_path("$(ADSPINNAKER)/spinnakerApp/Db")
set_requestfile_path("$(ADCORE)/iocBoot")
set_requestfile_path("$(ADCORE)/ADApp/Db")
# Optional: load ffmpegServer plugin
ffmpegServerConfigure(8083)
ffmpegStreamConfigure("FfmStream1", 2, 0, "$(PORT)", 0, -1, 0)
dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegStream.template", "P=$(PREFIX),R=ffmstream1:,PORT=FfmStream1,NDARRAY_PORT=$(PORT)")
#ffmpegFileConfigure("FfmFile1", 16, 0, "$(PORT)", 0, -1, 0)
#dbLoadRecords("$(FFMPEGSERVER)/db/ffmpegFile.template", "P=$(PREFIX),R=ffmfile1:,PORT=FfmFile1,NDARRAY_PORT=$(PORT)")
set_requestfile_path("$(FFMPEGSERVER)/db")
iocInit()
# save things every thirty seconds
create_monitor_set("auto_settings.req", 30,"P=$(PREFIX)")
# Wait for enum callbacks to complete
epicsThreadSleep(1.0)
# Wait for callbacks on the property limits (DRVL, DRVH) to complete
epicsThreadSleep(1.0)
epicsEnvSet("IOC","iocflir_cameras")
epicsEnvSet("TOP","/opt/epics/epics_iocs/soft_iocs/flir_cameras")
epicsEnvSet("SUPPORT","/opt/epics/synApps_6_3/support")
epicsEnvSet("EPICS_BASE","/opt/epics/base")
epicsEnvSet("ALIVE","/opt/epics/synApps_6_3/support/alive-R1-4-1")
epicsEnvSet("AREA_DETECTOR","/opt/epics/synApps_6_3/support/areaDetector-master")
epicsEnvSet("ASYN","/opt/epics/synApps_6_3/support/asyn-R4-44-2")
epicsEnvSet("AUTOSAVE","/opt/epics/synApps_6_3/support/autosave-R5-11")
epicsEnvSet("BUSY","/opt/epics/synApps_6_3/support/busy-R1-7-4")
epicsEnvSet("CALC","/opt/epics/synApps_6_3/support/calc-R3-7-5")
epicsEnvSet("CAMAC","/opt/epics/synApps_6_3/support/camac-R2-7-5")
epicsEnvSet("CAPUTRECORDER","/opt/epics/synApps_6_3/support/caputRecorder-R1-7-6")
epicsEnvSet("DAC128V","/opt/epics/synApps_6_3/support/dac128V-R2-10-1")
epicsEnvSet("DELAYGEN","/opt/epics/synApps_6_3/support/delaygen-R1-2-4")
epicsEnvSet("DEVIOCSTATS","/opt/epics/synApps_6_3/support/iocStats-3-1-16")
epicsEnvSet("ETHERIP","/opt/epics/synApps_6_3/support/ether_ip-ether_ip-3-3")
epicsEnvSet("GALIL","/opt/epics/synApps_6_3/support/Galil-4-0-02")
epicsEnvSet("IP","/opt/epics/synApps_6_3/support/ip-R2-22")
epicsEnvSet("IP330","/opt/epics/synApps_6_3/support/ip330-R2-10")
epicsEnvSet("IPAC","/opt/epics/synApps_6_3/support/ipac-2-16")
epicsEnvSet("IPUNIDIG","/opt/epics/synApps_6_3/support/ipUnidig-R2-12")
epicsEnvSet("LABJACK","/opt/epics/synApps_6_3/support/LabJack-master")
epicsEnvSet("LOVE","/opt/epics/synApps_6_3/support/love-R3-2-9")
epicsEnvSet("LUA","/opt/epics/synApps_6_3/support/lua-R3-1")
epicsEnvSet("MCA","/opt/epics/synApps_6_3/support/mca-R7-10")
epicsEnvSet("MEASCOMP","/opt/epics/synApps_6_3/support/measComp-master")
epicsEnvSet("MODBUS","/opt/epics/synApps_6_3/support/modbus-R3-3")
epicsEnvSet("MOTOR","/opt/epics/synApps_6_3/support/motor-R7-3-1")
epicsEnvSet("OPTICS","/opt/epics/synApps_6_3/support/optics-R2-14")
epicsEnvSet("SCALER","/opt/epics/synApps_6_3/support/scaler-4-1")
epicsEnvSet("SNCSEQ","/opt/epics/synApps_6_3/support/sequencer-mirror-R2-2-9")
epicsEnvSet("SOFTGLUE","/opt/epics/synApps_6_3/support/softGlue-R2-8-4")
epicsEnvSet("SOFTGLUEZYNQ","/opt/epics/synApps_6_3/support/softGlueZynq-R2-0-5")
epicsEnvSet("SSCAN","/opt/epics/synApps_6_3/support/sscan-R2-11-6")
epicsEnvSet("STD","/opt/epics/synApps_6_3/support/std-R3-6-4")
epicsEnvSet("STREAM","/opt/epics/synApps_6_3/support/StreamDevice-2-8-24")
epicsEnvSet("VAC","/opt/epics/synApps_6_3/support/vac-R1-9-2")
epicsEnvSet("VME","/opt/epics/synApps_6_3/support/vme-R2-9-5")
epicsEnvSet("XXX","/opt/epics/synApps_6_3/support/xxx-R6-3")
epicsEnvSet("YOKOGAWA_DAS","/opt/epics/synApps_6_3/support/Yokogawa_DAS-R2-0-2")
epicsEnvSet("ALLENBRADLEY","/opt/epics/synApps_6_3/support/allenBradley-2-3")
epicsEnvSet("ADCORE","/opt/epics/synApps_6_3/support/areaDetector-master/ADCore")
epicsEnvSet("ADSUPPORT","/opt/epics/synApps_6_3/support/areaDetector-master/ADSupport")
epicsEnvSet("ULDAQ","/opt/epics/synApps_6_3/support/measComp-R4-2/libuldaq-1.2.1")
epicsEnvSet("ADEIGER","/opt/epics/synApps_6_3/support/areaDetector-master/ADEiger")
epicsEnvSet("ADGENICAM","/opt/epics/synApps_6_3/support/areaDetector-master/ADGenICam")
epicsEnvSet("ADPILATUS","/opt/epics/synApps_6_3/support/areaDetector-master/ADPilatus")
epicsEnvSet("ADSPINNAKER","/opt/epics/synApps_6_3/support/areaDetector-master/ADSpinnaker")
epicsEnvSet("ADURL","/opt/epics/synApps_6_3/support/areaDetector-master/ADURL")
epicsEnvSet("ADMARCCD","/opt/epics/synApps_6_3/support/areaDetector-master/ADmarCCD")
epicsEnvSet("FFMPEGSERVER","/opt/epics/synApps_6_3/support/areaDetector-master/ffmpegServer")
